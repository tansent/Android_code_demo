package com.jingtian.market.fragment;

import java.util.List;

import com.jingtian.market.adapter.ListBaseAdapter;
import com.jingtian.market.domain.AppInfo;
import com.jingtian.market.protocol.GameProtocol;
import com.jingtian.market.utils.UIUtil;
import com.jingtian.market.view.BaseListView;
import com.jingtian.market.view.LoadingPage.LoadResult;

import android.view.View;


/*
这段代码是我github “market” 项目中一个fragment，对应截图的内容。在截图中，对应的页面有listview，每个条目也有很多内容，这是个需要服务器的应用，
所以条目内容也要联网下载解析。我希望展示的是，我写项目会让代码的耦合性很低，以便于未来的扩展和维护，这样也会对多人联合完成项目的效率起到增益效果

This chunk of code is from one of my app named "market" in my github.The snapshot of this very page shows that there is a listview
with relatively chubby items inside. Yet, you cannot find massive code with all the adapters, holders, downloading and Json parsing code 
in this class. When I develope a project to a certain degree, I will decouple and sumarize the code utilizing interface, generic type 
and abstract methods so that if there is any needs in the future to modify or expand the project, it can be done in an instant.
*/

public class GameFragment extends BaseFragment {

	private List<AppInfo> infos;

	@Override
	public View createSuccessView() {
		BaseListView  listView=new BaseListView(UIUtil.getContext());
		listView.setAdapter(new ListBaseAdapter(infos, listView){

			@Override
			protected List<AppInfo> onload() {
				GameProtocol protocol = new GameProtocol();
				List<AppInfo> loadMore = protocol.load(infos.size()); //0,1,2
				listInfo.addAll(loadMore);
				return loadMore;
			}
			
		});
		return listView;
	}

	@Override
	public LoadResult loadStateFromServer() {
		GameProtocol protocol = new GameProtocol();
		infos = protocol.load(0);
		return checkData(infos);
	}
	
}
